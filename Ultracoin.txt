@name UltrakillCoinshot
@persist CanHitCoin Delay TargetRadius CoinClipSize MaxProjDistance UseTf2Trail TargetNPCS FFA AllowedWeapons:array [Whitelist Blacklist]:table #settings
@persist [Coins UsedCoins]:table LaserHolos:table HC CoinAmmo Tracer WepAmmo GroupName:string
@outputs Blacklist:table Whitelist:table

#commissioned by Spit Swapula (very big ultrakill fan)
#Main contributor: Katsu
#Other contributors: Heckteck, Anane, Spit Swapula, Omni, Runic

Players = players()
Time = systime()
Seconds = round(Time,0)

if(first()){
#############################################################################
############################### E2 SETTINGS #################################
    
    TargetRadius = 20000 #range that the coin will shoot a player from
    CoinClipSize = 4 #clip size
    MaxProjDistance = 400 #if the distance from the coin to the victim is greater than this, the projectile will be spawned this many units away
    Delay = 500 #wait this amount of time until the player can shoot the coin, otherwise they would be able to spam it, which aint no fun. 
    
    UseTf2Trail = 1 #set this to 1 if you and the server have tf2 assets and wish to see a better looking trail on the coin.
    Tracer = 1 # show tracer, turn off if distracting
    
    TargetNPCS = 1 #self explanatory
    FFA = 1 #if FFA is off, e2 will target only people within the whitelist, and the blacklist is disabled    
    
    AllowedWeapons = array("weapon_357")
    local WhitelistNames = array() 
    local BlacklistNames = array() #no need to add your own name to this, the chip will exclude the owner automatically
    
    GroupName = "UltrakillCoinshot"
    
    #[
    change this if some retard is using the datasignals to mess with the e2. 
    all e2s in this group can communicate with eachother and hit eachothers coins
    ]#
    
#############################################################################
#############################################################################
    BlacklistNames:pushString(owner():name())

    runOnTick(1)
    propSpawnUndo(0)
    
    function number weaponAllowed(W:entity){
        local T = W:type()
        foreach(K,V:string = AllowedWeapons){
            if(V == T){
                return 1   
            }
        }
        
        return 0
    }
    
    function number hitScan(Pos1:vector,Pos2:vector){
        #function checks if something is in the way between two points in the world
        
        local R = rangerOffset(Pos1,Pos2)
        
        if(R:fraction() > 0.90){
            return 1
        }else{
            return 0
        }
    } 
    
    function number findInTable(Table:table,Value:entity){
        for(A=1,Table:count()){
            if(Table[A,array][1,entity] == Value){
                return A
            }
        }
        return 0
    }

    function number listCheck(Table:table,Value:entity){
        for(A=1,Table:count()){
            if(Table[A,entity] == Value){
                return A
            }
        }
        return 0
    }
        
    function number nextClosestCoinIndex(V:vector){
        local ClosestIndex = 0
        local SmallestDist = inf()
        for(I=1,Coins:count()){
            local Dist = Coins[I,array][1,entity]:pos():distance(V)
            if(Dist < SmallestDist){
                SmallestDist = Dist
                ClosestIndex = I
            }
        }
        
        return ClosestIndex
    }
    
    function array rayHitSphere(RPos:vector, R:vector, SCenter:vector, SRadius){
        #SOME LINEAR ALGEBRA BULLSHIT -KATSU
        local C = SCenter - RPos        
        local DP = C:dot(R)
    
        if(DP < 0){
            return array(0,vec(0,0,0))
        }
        
        local Proj_r_C = (DP)*R
        local ProjLength = Proj_r_C:length()
        
        local D = sqrt((C:length())^2 - ProjLength^2)
        
        if(D>SRadius){
            return array(0,vec(0,0,0))
        }
        
        local TC = sqrt(SRadius^2 - D^2)
        local DistToPoint = ProjLength - TC
        
        local InitHit = RPos + R*DistToPoint
        
        return array(1,InitHit)
    }
        
    function number uLTRAKILL(CoinIndex,Countered){
        local FirstCoin = Coins[CoinIndex,array][1,entity]
        
        FirstCoin:soundPlay("coin" + Coins:count(),0,"physics/metal/metal_solid_impact_hard5.wav")
        soundPitch("coin" + Coins:count(),100)

        holoDelete(Coins[CoinIndex,array][3,number])
        FirstCoin:removeTrails()                    
        FirstCoin:propNotSolid(1)            
        UsedCoins:pushArray(Coins[CoinIndex,array])            
        Coins:remove(CoinIndex)
        
        local LastPos = FirstCoin:pos()
        local ShootPos = owner():shootPos()
        
        HC++
        holoCreate(HC)
        holoPos(HC,owner():shootPos())
        holoModel(HC,"models/props_c17/signpole001.mdl")
        holoMaterial(HC,"models/debug/debugwhite")
        holoDisableShading(HC,1)
        holoScale(HC,vec(2,2,50))
        holoClipEnabled(HC,1,1)
        holoColor(HC,vec(241,207,61))   
                
        local TX = -elevation(ShootPos,ang(0,0,0),LastPos) + 90
        local TY = -bearing(ShootPos,ang(0,0,0),LastPos)
        holoAng(HC,ang(TX,TY,0))
        holoClip(HC,1,LastPos,-holoEntity(HC):up(),1) 
        LaserHolos:pushArray(array(HC,Time + 1))
        
        local BeamColor = Countered ? vec(255,0,0) : vec(241,207,61)
        HC++
        holoCreate(HC)
        holoPos(HC,LastPos)
        holoModel(HC,"models/props_c17/signpole001.mdl")
        holoMaterial(HC,"models/debug/debugwhite")
        holoDisableShading(HC,1)
        holoScale(HC,vec(2,2,50))
        holoClipEnabled(HC,1,1)
        holoColor(HC,BeamColor)     
           
        LaserHolos:pushArray(array(HC,Time + 1))
        
        while(1){
            local CoinIndex = nextClosestCoinIndex(LastPos)
            
            if(CoinIndex){ #jump to next coin
                local CoinEnt = Coins[CoinIndex,array][1,entity]
                local CoinPos = CoinEnt:pos()
                    
                CoinEnt:soundPlay("coin"+Coins:count(),0,"physics/metal/metal_solid_impact_hard5.wav")
                soundPitch("coin"+Coins:count(),10)
                
                holoDelete(Coins[CoinIndex,array][3,number])
                Coins[CoinIndex,array][1,entity]:removeTrails()
                Coins[CoinIndex,array][1,entity]:propNotSolid(1)
                UsedCoins:pushArray(Coins[CoinIndex,array])
                Coins:remove(CoinIndex)
                
                #clip and ang the last laser holo
                local TX = -elevation(LastPos,ang(0,0,0),CoinPos) + 90
                local TY = -bearing(LastPos,ang(0,0,0),CoinPos)
                holoAng(HC,ang(TX,TY,0))
                holoClip(HC,1,CoinPos,-holoEntity(HC):up(),1) 
    
                LastPos = CoinPos 
                
                #new laser holo
                HC++
                holoCreate(HC)
                holoPos(HC,LastPos)
                holoModel(HC,"models/props_c17/signpole001.mdl")
                holoMaterial(HC,"models/debug/debugwhite")
                holoDisableShading(HC,1)
                holoScale(HC,vec(2,2,50))
                holoClipEnabled(HC,1,1)
                holoColor(HC,BeamColor)
                
                LaserHolos:pushArray(array(HC,Time + 1))
            }else{
                break
            }
        }
        

        local Victims = table()
        
        if(Countered){
            if(hitScan(LastPos,owner():pos()+vec(0,0,30))){
                Victims:pushArray(array(owner(),1))
            }
        }else{        
            for(I=1,Players:count()){
                local Distance = Players[I,entity]:pos():distance(LastPos)
                if(Distance < TargetRadius & hitScan(LastPos,Players[I,entity]:pos()+vec(0,0,30)) & Players[I,entity]:isAlive()){
                    if(FFA){
                        if(!listCheck(Blacklist,Players[I,entity])){
                            Victims:pushArray(array(Players[I,entity],Distance))
                        }
                    }else{
                        if(listCheck(Whitelist,Players[I,entity])){
                            Victims:pushArray(array(Players[I,entity],Distance))
                        }
                    }
                }
            }
            
            if(TargetNPCS){
                findClearWhiteList()
                findIncludeClass("npc")
                findInSphere(LastPos,TargetRadius)
                local NPCS = findToArray()

                for(I=1,NPCS:count()){
                    local Distance = NPCS[I,entity]:pos():distance(LastPos)
                    if(hitScan(LastPos,NPCS[I,entity]:pos()+vec(0,0,30))){
                        Victims:pushArray(array(NPCS[I,entity],Distance))
                    }
                }
            }
        }
        
                
        if(Victims:count() <= 0){
            if(!Countered){
                print("TOSS: No victims found")
            }
            return 0
        }else{    
            local ClosestIndex = 1
            for(I=1,Victims:count()){
                if(Victims[I,array][2,number] < Victims[ClosestIndex,array][2,number]){
                    ClosestIndex = I
                }
            }
                    
            local Victim = Victims[ClosestIndex,array][1,entity]
            
            if(Victim:type() == "player"){
                print("Victim: " + Victim:name())
            }else{
                print("Victim: " + Victim:type())
            }                    
            
            local Hitpos = Victim:toWorld(vec(0,0,30))
            local TX = -elevation(LastPos,ang(0,0,0),Hitpos)
            local TY = -bearing(LastPos,ang(0,0,0),Hitpos)
            
            holoAng(HC,ang(TX+90,TY,0))
            holoClip(HC,1,Hitpos,-holoEntity(HC):up(),1) 
            
            #bottle 
            local BottleDist = LastPos:distance(Hitpos)
            
            local BottlePos = (BottleDist > MaxProjDistance) ? Hitpos + (LastPos - Hitpos):normalized()*MaxProjDistance : LastPos
            local Bottle = propSpawn("models/props_junk/glassjug01.mdl",BottlePos,ang(TX,TY,0),0)
            Bottle:propGravity(0)
            Bottle:propDrag(0)
            Bottle:setMass(8)
                    
            Bottle:applyForce(Bottle:forward()*2000*Bottle:mass())
            Bottle:setTrails(10,5,1,"trails/laser",vec(225,221,0),255)
            
            return 1
        }        
    }
    
    timer("reload",1)      
    CoinAmmo = CoinClipSize
    LHI = 1

    if(FFA){
        for(I=1,BlacklistNames:count()){
            local NewBlackListedPlayer = findPlayerByName(BlacklistNames[I,string])
            if(NewBlackListedPlayer){
                Blacklist:pushEntity(NewBlackListedPlayer)
                hint(NewBlackListedPlayer:name(),10)
            }        
        }
        hint("[blacklisted:]",10)
        hint("[FFA MODE]",10)
    }else{
        for(I=1,WhitelistNames:count()){
            local NewWhiteListedPlayer = findPlayerByName(WhitelistNames[I,string])
            if(NewWhiteListedPlayer){
                Whitelist:pushEntity(NewWhiteListedPlayer)
                hint(NewWhiteListedPlayer:name(),5)
            }
        }
        hint("[whitelisted:]",10)
        hint("[TDM MODE]",10)
    }
    
    dsJoinGroup(GroupName)
    dsSetScope(10)
    
}


if(changed(Seconds)){
    for(I=1,Coins:count()){
        if(Seconds >= Coins[I,array][2,number]){
            Coins[I,array][1,entity]:propDelete()
            Coins:remove(I)
        }
    }
    
    for(I=1,UsedCoins:count()){
        if(Seconds >= UsedCoins[I,array][2,number]){
            UsedCoins[I,array][1,entity]:propDelete()
            UsedCoins:remove(I)
        }
    }
}

if(clk("reload")){
    timer("reload",3000)
    
    if(CoinAmmo < CoinClipSize){
        CoinAmmo++
        hint("+Coin, " + CoinAmmo + "/4",3)
    }
}

##############################################################

RMB = owner():keyAttack2()
WepAmmo = owner():weapon():clip1()

if(changed(RMB) & RMB & CoinAmmo > 0 & weaponAllowed(owner():weapon())){
    CanHitCoin = 0
    CoinAmmo--
    hint(CoinAmmo + "/4",2)
    
    owner():soundPlay(1,0,"physics/metal/chain_impact_hard1.wav")
    soundVolume(1,0.3)

    Coin = propSpawn("models/props_junk/PopCan01a.mdl",owner():shootPos()+owner():eye()*30-vec(0,0,20),ang(0,0,0),0)
    Coin:setMass(2)
    Coin:propGravity(1.5)
    Coin:applyForce(Coin:up() * 800)
    Coin:applyForce(Coin:owner():eye() * 1000 + Coin:owner():vel() * 2)
    Coin:setAlpha(0)
    if(UseTf2Trail){
        Coin:setTrails(10,7,1,"effects/beam_generic01",vec(225,255,255),255)
    }else{
        Coin:setTrails(10,7,1,"trails/laser",vec(225,255,255),255)
    }        
    Coin:propDrag(0)
    
    HC++
    holoCreate(HC)
    holoModel(HC,"models/hunter/tubes/circle2x2.mdl")
    holoMaterial(HC,"models/shiny")
    holoColor(HC,vec(255,191,0))
    holoScale(HC,vec(0.1,0.1,0.8))
    holoParent(HC,Coin)
    holoPos(HC,Coin:toWorld(vec(0,0,0)))
    
    Coins:pushArray(array(Coin,Seconds+7,HC))
    stoptimer("Antispam")
    timer("Antispam",Delay)
}

#############################
local Weapon = owner():weapon()

if(!changed(Weapon) & changed(WepAmmo) & $WepAmmo < 0 & weaponAllowed(Weapon)){    
    local HitCoin = 0
    
    if(CanHitCoin){
        findClearWhiteList()
        findIncludeModel("models/props_junk/PopCan01a.mdl")
        findInSphere(owner():pos(),9999999999999)
        local Found = findToArray()
    
        for(I=1,Found:count()){
            local CurrCoin = Found[I,entity]
    
            local RHS = rayHitSphere(owner():shootPos(),owner():eye(),CurrCoin:pos(),100)
            local Hit = RHS[1,number] #& hitScan(Blacklist[I,entity]:shootPos(),RHS[2,vector])
                
            if(Hit){
                local CoinOwner = CurrCoin:owner()      
                if(CurrCoin:owner() == owner()){ #our coin
                    print("***COIN HIT***")
                    uLTRAKILL(findInTable(Coins,CurrCoin),0)          
                }else{ #countered someone
                    print("***COIN COUNTER***")
                    dsSend("counter",GroupName,array(CoinOwner,CurrCoin,owner()))
                }
                
                HitCoin = 1
                
                break
            }
    
        }
        
        #[ #aim assist angle [depreciated]
        findInCone(owner():shootPos(),owner():eye(),9999999999999,AimAssistAng)
        local Found = findToArray()
        
        for(I=1,Found:count()){
            local CoinIndex = findInTable(Coins,Found[I,entity])
            if(CoinIndex){
                print("***COIN HIT***")
                            
                uLTRAKILL(CoinIndex)
            }
        }
        ]#
    }
    
    if(!HitCoin & Tracer){
        HC++
        holoCreate(HC)
        holoPos(HC,owner():shootPos() + owner():eye()*20)
        holoAng(HC,owner():eyeAngles() + ang(90,0,0))
        holoModel(HC,"models/props_c17/signpole001.mdl")
        holoMaterial(HC,"models/debug/debugwhite")
        holoDisableShading(HC,1)
        holoScale(HC,vec(2,2,50))
        holoClipEnabled(HC,1,1)
        holoColor(HC,vec(241,207,61))
               
        LaserHolos:pushArray(array(HC,Time + 0.5))
    }
}

#############################################

for(I=1,LaserHolos:count()){
    local DT = LaserHolos[I,array][2,number] - Time
    
    if(DT > 0){
        local Down = DT/0.5
        
        holoScale(LaserHolos[I,array][1,number],vec(Down*1.5,Down*1.5,50))
        holoAlpha(LaserHolos[I,array][1,number],255*Down)
    }else{
        holoDelete(LaserHolos[I,array][1,number])
        LaserHolos:remove(I)
    }
}

###############################################
# coin goes away upon hitting ground

for(I=1,Coins:count()){
    local CurrCoin = Coins[I,array][1,entity]
    rangerFilter(CurrCoin)
    rangerFilter(owner())
    
    local R = rangerOffset(10,CurrCoin:pos(),vec(0,0,-1))
    if(R:hit()){
        CurrCoin:propDelete()
        Coins:remove(I)
    }
}

###############################################
# countering

if(dsClk("counter")){
    local CounterData = dsGetArray()
    
    if(CounterData[1,entity] == owner()){ #we got countered
        local CoinIndex = findInTable(Coins,CounterData[2,entity])
        
        if(CoinIndex){
            print("countered by " + CounterData[3,entity]:name())
            uLTRAKILL(findInTable(Coins,CounterData[2,entity]),1)
        }
    }
}

################################################
#### TeenyWeeny Antispam. Greetz by Runic. #####
################################################

if(clk("Antispam")){
    CanHitCoin = 1
}
